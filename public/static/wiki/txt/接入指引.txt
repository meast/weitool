<p>该文档讲述如何使用示例代码接入加解密，参考本文档并使用示例代码，加解密的接入将非常简单。若想进一步的了解细节，请查看《消息加解密详细技术方案》。微信公众平台提供了C++、php、Java、Python和C# 5种语言的示例代码，每种语言的类名和接口名均一致，下面以C++为例说明：</p><table id="toc" class="toc"><tr><td><div id="toctitle"><h2>目录</h2></div><ul><li class="toclevel-1 tocsection-1"><a href="#.E5.87.BD.E6.95.B0.E8.AF.B4.E6.98.8E"><span class="tocnumber">1</span> <span class="toctext">函数说明</span></a></li><li class="toclevel-1 tocsection-2"><a href="#.E4.BD.BF.E7.94.A8.E6.96.B9.E6.B3.95"><span class="tocnumber">2</span> <span class="toctext">使用方法</span></a></li><li class="toclevel-1 tocsection-3"><a href="#.E6.B3.A8.E6.84.8F.E4.BA.8B.E9.A1.B9"><span class="tocnumber">3</span> <span class="toctext">注意事项</span></a></li><li class="toclevel-1 tocsection-4"><a href="#.E5.87.BD.E6.95.B0.E9.94.99.E8.AF.AF.E8.BF.94.E5.9B.9E.E7.A0.81"><span class="tocnumber">4</span> <span class="toctext">函数错误返回码</span></a></li></ul></td></tr></table><h3> <span class="mw-headline" id=".E5.87.BD.E6.95.B0.E8.AF.B4.E6.98.8E"><b>函数说明</b></span></h3><p><b>构造函数</b></p><pre>   // @param sToken: 公众平台上，开发者设置的Token   // @param sEncodingAESKey: 公众平台上，开发者设置的EncodingAESKey   // @param sAppid: 公众号的appid   WXBizMsgCrypt(const std::string &amp;sToken,                    const std::string &amp;sEncodingAESKey,                    const std::string &amp;sAppid)                  &#160;:m_sToken(sToken), m_sEncodingAESKey(sEncodingAESKey), m_sAppid(sAppid){   }</pre><p><br /> <b>解密函数</b></p><pre>   // 检验消息的真实性，并且获取解密后的明文   // @param sMsgSignature: 签名串，对应URL参数的msg_signature   // @param sTimeStamp: 时间戳，对应URL参数的timestamp   // @param sNonce: 随机串，对应URL参数的nonce   // @param sPostData: 密文，对应POST请求的数据   // @param sMsg: 解密后的明文，当return返回0时有效   // @return: 成功0，失败返回对应的错误码   int DecryptMsg(const std::string &amp;sMsgSignature,                   const std::string &amp;sTimeStamp,                   const std::string &amp;sNonce,                   const std::string &amp;sPostData,                   std::string &amp;sMsg);</pre><p><br />					<b>加密函数</b></p><pre>   //将公众号回复用户的消息加密打包   // @param sReplyMsg:公众号待回复用户的消息，xml格式的字符串   // @param sTimeStamp: 时间戳，可以自己生成，也可以用URL参数的timestamp   // @param sNonce: 随机串，可以自己生成，也可以用URL参数的nonce   // @param sEncryptMsg: 加密后的可以直接回复用户的密文，包括msg_signature, timestamp, nonce, encrypt的xml格式的字符串,当return返回0时有效   // return：成功0，失败返回对应的错误码   int EncryptMsg(const std::string &amp;sReplyMsg,                   const std::string &amp;sTimeStamp,                   const std::string &amp;sNonce,                   std::string &amp;sEncryptMsg);</pre><h3> <span class="mw-headline" id=".E4.BD.BF.E7.94.A8.E6.96.B9.E6.B3.95"><b>使用方法</b></span></h3><p>在安全模式或兼容模式下，url上会新增两个参数encrypt_type和msg_signature。encrypt_type表示加密类型，msg_signature:表示对消息体的签名。url上无encrypt_type参数或者其值为raw时表示为不加密；encrypt_type为aes时，表示aes加密（暂时只有raw和aes两种值)。公众帐号开发者根据此参数来判断微信公众平台发送的消息是否加密。<b>兼容模式和安全模式加解密的方法完全一样</b>，兼容模式的xml消息体比安全模式多了几个明文字段，具体请查看《消息加解密详细技术方案》。</p><p><b>实例化对象</b></p><p>使用构造函数，实例化一个对象，传入公众帐号的token, appid, EncodingAESKey。</p><p><b>解密</b></p><p>安全模式或者兼容模式下，公众号收到以下带密文消息体(“……”表示兼容模式下的明文字段)：</p><pre>encrypt_msg = &lt;xml&gt;	&lt;ToUserName&gt;&lt;![CDATA[gh_10f6c3c3ac5a]]&gt;&lt;/ToUserName&gt;	……	&lt;Encrypt&gt;&lt;![CDATA[hQM/NS0ujPGbF+/8yVe61E3mUVWVO1izRlZdyv26zrVUSE3zUEBdcXITxjbjiHH38kexVdpQLCnRfbrqny1yGvgqqKTGKxJWWQ9D5WiiUKxavHRNzYVzAjYkp7esNGy7HJcl/P3BGarQF3+AWyNQ5w7xax5GbOwiXD54yri7xmNMHBOHapDzBslbnTFiEy+8sjSl4asNbn2+ZVBpqGsyKDv0ZG+DlSlXlW+gNPVLP+YxeUhJcyfp91qoa0FJagRNlkNul4mGz+sZXJs0WF7lPx6lslDGW3J66crvIIx/klpl0oa/tC6n/9c8OFQ9pp8hrLq7B9EaAGFlIyz5UhVLiWPN97JkL6JCfxVooVMEKcKRrrlRDGe8RWVM3EW/nxk9Ic37lYY5j97YZfq375AoTBdGDtoPFZsvv3Upyut1i6G0JRogUsMPlyZl9B8Pl/wcA7k7i4LYMr2yK4SxNFrBUw==]]&gt;&lt;/Encrypt&gt;&lt;/xml&gt;</pre><p><br /> <b>调用DecryptMsg接口</b>，传入收到的url上的参数：msg_signature(注意:不是signature，而是msg_signature)， timestamp， nonce和<b>encrypt_msg</b>，若调用成功，sMsg则为输出结果，其内容为如下的明文的xml消息体：</p><pre>&lt;xml&gt;	&lt;ToUserName&gt;&lt;![CDATA[gh_10f6c3c3ac5a]]&gt;&lt;/ToUserName&gt;	&lt;FromUserName&gt;&lt;![CDATA[oyORnuP8q7ou2gfYjqLzSIWZf0rs]]&gt;&lt;/FromUserName&gt; 	&lt;CreateTime&gt;1411035097&lt;/CreateTime&gt;	&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;	&lt;Content&gt;&lt;![CDATA[this is a test message]]&gt;&lt;/Content&gt;	&lt;MsgId&gt;6060349595123187712&lt;/MsgId&gt;&lt;/xml&gt;</pre><p><b>公众帐号处理消息</b></p><p>生成需要回复给微信公众平台的xml消息体，假设回复以下内容：</p><pre>res_msg = &lt;xml&gt;    	&lt;ToUserName&gt;&lt;![CDATA[oyORnuP8q7ou2gfYjqLzSIWZf0rs]]&gt;&lt;/ToUserName&gt;	&lt;FromUserName&gt;&lt;![CDATA[gh_10f6c3c3ac5a]]&gt;&lt;/FromUserName&gt;	&lt;CreateTime&gt;1411034505&lt;/CreateTime&gt;	&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;	&lt;Content&gt;&lt;![CDATA[Welcome to join us!]]&gt;&lt;/Content&gt;	&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;&lt;/xml&gt;</pre><p><b>回包加密</b></p><p>调用EncryptMsg接口，传入需要回复给微信公众平台的res_msg, timestamp, nonce，若加密成功，则sEncryptMsg为密文消息体，内容如下：</p><pre>&lt;xml&gt;  	&lt;Encrypt&gt;&lt;![CDATA[LDFAmKFr7U/RMmwRbsR676wjym90byw7+hhh226e8bu6KVYy00HheIsVER4eMgz/VBtofSaeXXQBz6fVdkN2CzBUaTtjJeTCXEIDfTBNxpw/QRLGLqqMZHA3I+JiBxrrSzd2yXuXst7TdkVgY4lZEHQcWk85x1niT79XLaWQog+OnBV31eZbXGPPv8dZciKqGo0meTYi+fkMEJdyS8OE7NjO79vpIyIw7hMBtEXPBK/tJGN5m5SoAS6I4rRZ8Zl8umKxXqgr7N8ZOs6DB9tokpvSl9wT9T3E62rufaKP5EL1imJUd1pngxy09EP24O8Th4bCrdUcZpJio2l11vE6bWK2s5WrLuO0cKY2GP2unQ4fDxh0L4ePmNOVFJwp9Hyvd0BAsleXA4jWeOMw5nH3Vn49/Q/ZAQ2HN3dB0bMA+6KJYLvIzTz/Iz6vEjk8ZkK+AbhW5eldnyRDXP/OWfZH2P3WQZUwc/G/LGmS3ekqMwQThhS2Eg5t4yHv0mAIei07Lknip8nnwgEeF4R9hOGutE9ETsGG4CP1LHTQ4fgYchOMfB3wANOjIt9xendbhHbu51Z4OKnA0F+MlgZomiqweT1v/+LUxcsFAZ1J+Vtt0FQXElDKg+YyQnRCiLl3I+GJ/cxSj86XwClZC3NNhAkVU11SvxcXEYh9smckV/qRP2Acsvdls0UqZVWnPtzgx8hc8QBZaeH+JeiaPQD88frNvA==]]&gt;&lt;/Encrypt&gt;	&lt;MsgSignature&gt;&lt;![CDATA[8d9521e63f84b2cd2e0daa124eb7eb0c34b6204a]]&gt;&lt;/MsgSignature&gt;	&lt;TimeStamp&gt;1411034505&lt;/TimeStamp&gt;	&lt;Nonce&gt;&lt;![CDATA[1351554359]]&gt;&lt;/Nonce&gt;&lt;/xml&gt;</pre><h3> <span class="mw-headline" id=".E6.B3.A8.E6.84.8F.E4.BA.8B.E9.A1.B9"><b>注意事项</b></span></h3><ul><li>EncodingAESKey长度固定为43个字符，从a-z,A-Z,0-9共62个字符中选取。 公众帐号可以在公众平台的开发者中心的服务器配置修改</li><li>出于安全考虑，公众平台网站提供了修改EncodingAESKey的功能（在EncodingAESKey可能泄漏时进行修改），所以建议公众账号保存当前的和上一次的EncodinAESKey，若当前EncodingAESKey解密失败，则尝试用上一次的EncodingAESKey的解密。<b>回包时，用哪个Key解密成功，则用此Key加密对应的回包</b></li><li>兼容模式消息体同时存在明文和密文，消息体会增至以前的3倍左右，开发者注意检查系统，<b>防止因消息变长和URL参数增加而出现接收错误</b></li><li>如果url上无encrypt_type参数或者其值为raw，则回复明文，否则回复密文。<b>兼容模式期间公众账号回复明文或密文均可（不要两种类型都回）</b></li></ul><h3> <span class="mw-headline" id=".E5.87.BD.E6.95.B0.E9.94.99.E8.AF.AF.E8.BF.94.E5.9B.9E.E7.A0.81"><b>函数错误返回码</b></span></h3><table border="1" cellspacing="0" cellpadding="4" align="center" width="400px"><tr><th style="width:120px">函数返回码</th><th>说明</th></tr><tr><td> 0</td><td> 处理成功</td></tr><tr><td> -40001</td><td> 校验签名失败</td></tr><tr><td> -40002</td><td> 解析xml失败</td></tr><tr><td> -40003</td><td> 计算签名失败</td></tr><tr><td> -40004</td><td> 不合法的AESKey</td></tr><tr><td> -40005</td><td> 校验AppID失败</td></tr><tr><td> -40006</td><td> AES加密失败</td></tr><tr><td> -40007</td><td> AES解密失败</td></tr><tr><td> -40008</td><td> 公众平台发送的xml不合法</td></tr><tr><td> -40009</td><td> Base64编码失败</td></tr><tr><td> -40010</td><td> Base64解码失败</td></tr><tr><td> -40011</td><td> 公众帐号生成回包xml失败</td></tr></table><!-- NewPP limit reportPreprocessor node count: 15/1000000Post-expand include size: 0/2097152 bytesTemplate argument size: 0/2097152 bytesExpensive parser function count: 0/100--><div class="printfooter">取自“<a href="http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E5%85%A5%E6%8C%87%E5%BC%95">http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E5%85%A5%E6%8C%87%E5%BC%95</a>”</div>